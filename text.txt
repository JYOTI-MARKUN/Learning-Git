to add all file from change (current state) to stagged state git add .
to create multiple files together touch index.html xtyle.css script.js text.text
to check all  commit histrory git log
to check all changes in short git log -s
to create new directory mkdir
to move a file mv indexx.hrml / file name
to move a file in outer folder mv filename ../
to go back in the previous directory cd ../
to clear console ctrl + L
to get the list of all the files inside a folder ls
to commit a change get commit -m ""
to go in a particular version of code git checkout address (copied from log)
to get back in main barch git checkout main
to configure user anme and user email:- git config -- global user.name, git config user.email
<<<<<<< HEAD
to get change of all branch git log --all
to get changes of all branch in short form git log --sll -oneline
to clear terminal if stuck q
to open terminal ctrl + tilde
to get graph view git log --all --oneline --graph
to delete a branch that has no code just you have created recently and wanna delete then git branch --delete branchname
=======
to check the number of branch in the code git branch
to create a new branch git branch branchname
to checkout to a branch git checkout branchname
to get changes / commit info of all branches together git log --all and to get details in short git log gt log --all --oneline
to  clear the terminal of ctrl + L is not working then use q

to push code from local repo to github git push -u origin branchname
to change the branch name git branch -m main
to pull changes from github to local repo git pull
 about
to merge branches git merge branchname
to delete branch git
to push local repo into github
git push -u origin branchname
to rename a branch git branch -m branchname(you wanted to change to)
to reset commit in the local repo there are three method 
git reset --hard id of the commit where we wanna go (in case of hard reset the head , update the staging area reset the working directory)
git reset --soft id of the commit where we wanna go (in case of soft the head reset , but staging area and current working directory remains unchanges)
git reset --mixed id of the commit where we wanna go (in case of soft the head reset and staging area but current working directory remains unchanges)
if we reset the changes and after that we wanna back those changes then we can use git resert --hard id where we wanna go (but git log will not provide us reset commit id so if we do git reflog that provide us all commit id's )
head represent the current working directly, we can move our head by usiing git checkout head~4 thi will move our code 4 commit behind
we can also so go some particular commit id by git checkout idname

WHEN WE ADD DIFFERENT CODE IN DIFFERENT BARNCH AS THE SAME LINE THEN WHEN WE TRY TO ERGE BRANCHES WE WILL FACE CONFLICT WE NEED TO SOLVE THIS CONFLICT WE NEED TO CHOOSE THE RIGHT CODE WE WANNA SAVE AND THEN ADD IT AND COMMIT IT AND PUSH TO THE ORIGIN 

STASH CHANGES : WHEN WE ARE WORKING ON SOME BRANCH AND SUDDENLY WE NEED TO MOVE TO ANOTHER BRANCH WITH COMMIT AS OUR CODE IS NOT COMPLETED BUT ALSO DO NOT WANT TO LOOSE HALF CODE SO WE HAVE TO STASH CHANGES AND IT WILL STORE IN STASH LIST WE CAN APPLY STACH ONE BY ONE BY 
git stash apply 1
git stash list
git stash drop 1
git stash clear

